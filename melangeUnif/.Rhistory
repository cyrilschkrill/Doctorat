}
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = c(0,"max"))
rf2(10,1)
rf2(10,1)
rf2
spec = function(distrib1.name, distrib2.name, distrib1.parameter, distrib2.parameter){
distributionList = c("exp", "norm", "lnorm", "weibull","unif")
test = (distrib1.name %in% distributionList) & (distrib1.name %in% distributionList)
if( test == FALSE ){ print("Erreur de saisie dans le nom d'une des composantes")}
# SPEC. COMPOSANTE 1
if(length(distrib1.parameter) == 1){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter)
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter)
}
if(length(distrib1.parameter) == 2){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter[1], distrib1.parameter[2])
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter[1], distrib1.parameter[2])
}
assign("rf1", rf1, envir = .GlobalEnv)
assign("df1", df1, envir = .GlobalEnv)
if(is.character(distrib2.parameter[1])){
unknown.parameter = distrib2.parameter[1]
known.parameter = distrib2.parameter[2]}
else{ unknow.parameter = distrib2.parameter[2]
known.parameter = distrib2.parameter[1]}
print(unknown.parameter)
print(known.parameter)
# SEPC. COMPOSANTE 2
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n, assign(unknown.parameter,theta),known.parameter)
df2 = function(x,theta) get(paste0("d", distrib2.name))(x, assign(unknown.parameter,theta),known.parameter)
assign("rf2", rf2, envir = .GlobalEnv)
assign("df2", df2, envir = .GlobalEnv)
# curve(df1(x), main = paste0("d",distrib1.name," de paramètre ",distrib1.parameter))
}
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = c(0,"max"))
distrib2.parameter = c(0,"max")
is.character(distrib2.parameter[1])
distrib2.parameter[1]
is.String
install.packagaes("NPL")
install.packages("NPL")
spec = function(distrib1.name, distrib2.name, distrib1.parameter, distrib2.parameter){
distributionList = c("exp", "norm", "lnorm", "weibull","unif")
test = (distrib1.name %in% distributionList) & (distrib1.name %in% distributionList)
if( test == FALSE ){ print("Erreur de saisie dans le nom d'une des composantes")}
# SPEC. COMPOSANTE 1
if(length(distrib1.parameter) == 1){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter)
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter)
}
if(length(distrib1.parameter) == 2){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter[1], distrib1.parameter[2])
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter[1], distrib1.parameter[2])
}
assign("rf1", rf1, envir = .GlobalEnv)
assign("df1", df1, envir = .GlobalEnv)
# if(is.character(distrib2.parameter[1])){
#   unknown.parameter = distrib2.parameter[1]
#   known.parameter = distrib2.parameter[2]}
# else{ unknow.parameter = distrib2.parameter[2]
#       known.parameter = distrib2.parameter[1]}
#
# print(unknown.parameter)
# print(known.parameter)
# SEPC. COMPOSANTE 2
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n, assign(distrib2.parameter$unknown.parameter,theta),distrib2.parameter$known.parameter)
#df2 = function(x,theta) get(paste0("d", distrib2.name))(x, assign(unknown.parameter,theta),known.parameter)
assign("rf2", rf2, envir = .GlobalEnv)
# assign("df2", df2, envir = .GlobalEnv)
# curve(df1(x), main = paste0("d",distrib1.name," de paramètre ",distrib1.parameter))
}
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = list(known.parameter=0,unknown.parameter = "max"))
rf2(10,1)
rf2(10,0.5)
rf2
distrib2.parameter = list(known.parameter=0,unknown.parameter = "max")
distrib2.parameter$known.parameter
distrib2.parameter$unknown.parameter
spec = function(distrib1.name, distrib2.name, distrib1.parameter, distrib2.parameter){
distributionList = c("exp", "norm", "lnorm", "weibull","unif")
test = (distrib1.name %in% distributionList) & (distrib1.name %in% distributionList)
if( test == FALSE ){ print("Erreur de saisie dans le nom d'une des composantes")}
# SPEC. COMPOSANTE 1
if(length(distrib1.parameter) == 1){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter)
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter)
}
if(length(distrib1.parameter) == 2){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter[1], distrib1.parameter[2])
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter[1], distrib1.parameter[2])
}
assign("rf1", rf1, envir = .GlobalEnv)
assign("df1", df1, envir = .GlobalEnv)
# if(is.character(distrib2.parameter[1])){
#   unknown.parameter = distrib2.parameter[1]
#   known.parameter = distrib2.parameter[2]}
# else{ unknow.parameter = distrib2.parameter[2]
#       known.parameter = distrib2.parameter[1]}
#
# print(unknown.parameter)
# print(known.parameter)
# SEPC. COMPOSANTE 2
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,distrib2.parameter$known.parameter, assign(distrib2.parameter$unknown.parameter,theta))
#df2 = function(x,theta) get(paste0("d", distrib2.name))(x, assign(unknown.parameter,theta),known.parameter)
assign("rf2", rf2, envir = .GlobalEnv)
# assign("df2", df2, envir = .GlobalEnv)
# curve(df1(x), main = paste0("d",distrib1.name," de paramètre ",distrib1.parameter))
}
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = list(known.parameter=0,unknown.parameter = "max"))
rf2(10,1)
is.character(distrib2.parameter$known.parameter)
distrib2.parameter[1]
distrib2.parameter[1] == distrib2.parameter$known.parameter
distrib2.parameter[1] == distrib2.parameter$unknown.parameter
spec = function(distrib1.name, distrib2.name, distrib1.parameter, distrib2.parameter){
distributionList = c("exp", "norm", "lnorm", "weibull","unif")
test = (distrib1.name %in% distributionList) & (distrib1.name %in% distributionList)
if( test == FALSE ){ print("Erreur de saisie dans le nom d'une des composantes")}
# SPEC. COMPOSANTE 1
if(length(distrib1.parameter) == 1){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter)
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter)
}
if(length(distrib1.parameter) == 2){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter[1], distrib1.parameter[2])
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter[1], distrib1.parameter[2])
}
assign("rf1", rf1, envir = .GlobalEnv)
assign("df1", df1, envir = .GlobalEnv)
if(distrib2.parameter[1] == distrib2.parameter$unkown.parameter){
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,assign(distrib2.parameter$unknown.parameter,theta),distrib2.parameter$known.parameter)
}
else{
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,distrib2.parameter$known.parameter,assign(distrib2.parameter$unknown.parameter,theta))
}
# SEPC. COMPOSANTE 2
#rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,distrib2.parameter$known.parameter, assign(distrib2.parameter$unknown.parameter,theta))
#df2 = function(x,theta) get(paste0("d", distrib2.name))(x, assign(unknown.parameter,theta),known.parameter)
assign("rf2", rf2, envir = .GlobalEnv)
# assign("df2", df2, envir = .GlobalEnv)
# curve(df1(x), main = paste0("d",distrib1.name," de paramètre ",distrib1.parameter))
}
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = list(known.parameter=0,unknown.parameter = "max"))
spec = function(distrib1.name, distrib2.name, distrib1.parameter, distrib2.parameter){
distributionList = c("exp", "norm", "lnorm", "weibull","unif")
test = (distrib1.name %in% distributionList) & (distrib1.name %in% distributionList)
if( test == FALSE ){ print("Erreur de saisie dans le nom d'une des composantes")}
# SPEC. COMPOSANTE 1
if(length(distrib1.parameter) == 1){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter)
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter)
}
if(length(distrib1.parameter) == 2){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter[1], distrib1.parameter[2])
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter[1], distrib1.parameter[2])
}
assign("rf1", rf1, envir = .GlobalEnv)
assign("df1", df1, envir = .GlobalEnv)
if(distrib2.parameter[1] == distrib2.parameter$unknown.parameter){
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,assign(distrib2.parameter$unknown.parameter,theta),distrib2.parameter$known.parameter)
}
else{
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,distrib2.parameter$known.parameter,assign(distrib2.parameter$unknown.parameter,theta))
}
# SEPC. COMPOSANTE 2
#rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,distrib2.parameter$known.parameter, assign(distrib2.parameter$unknown.parameter,theta))
#df2 = function(x,theta) get(paste0("d", distrib2.name))(x, assign(unknown.parameter,theta),known.parameter)
assign("rf2", rf2, envir = .GlobalEnv)
# assign("df2", df2, envir = .GlobalEnv)
# curve(df1(x), main = paste0("d",distrib1.name," de paramètre ",distrib1.parameter))
}
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = list(known.parameter=0,unknown.parameter = "max"))
rf2(10,1)
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = list(known.parameter=1,unknown.parameter = "min"))
rf2(10,0.5)
spec = function(distrib1.name, distrib2.name, distrib1.parameter, distrib2.parameter, indice.pos){
distributionList = c("exp", "norm", "lnorm", "weibull","unif")
test = (distrib1.name %in% distributionList) & (distrib1.name %in% distributionList)
if( test == FALSE ){ print("Erreur de saisie dans le nom d'une des composantes")}
# SPEC. COMPOSANTE 1
if(length(distrib1.parameter) == 1){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter)
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter)
}
if(length(distrib1.parameter) == 2){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter[1], distrib1.parameter[2])
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter[1], distrib1.parameter[2])
}
assign("rf1", rf1, envir = .GlobalEnv)
assign("df1", df1, envir = .GlobalEnv)
if(indice == 1){
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,assign(distrib2.parameter$unknown.parameter,theta),distrib2.parameter$known.parameter)
}
else{
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,distrib2.parameter$known.parameter,assign(distrib2.parameter$unknown.parameter,theta))
}
# SEPC. COMPOSANTE 2
#rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,distrib2.parameter$known.parameter, assign(distrib2.parameter$unknown.parameter,theta))
#df2 = function(x,theta) get(paste0("d", distrib2.name))(x, assign(unknown.parameter,theta),known.parameter)
assign("rf2", rf2, envir = .GlobalEnv)
# assign("df2", df2, envir = .GlobalEnv)
# curve(df1(x), main = paste0("d",distrib1.name," de paramètre ",distrib1.parameter))
}
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = list(known.parameter=1,unknown.parameter = "min"), indice.pos = 1)
spec = function(distrib1.name, distrib2.name, distrib1.parameter, distrib2.parameter, indice.pos){
distributionList = c("exp", "norm", "lnorm", "weibull","unif")
test = (distrib1.name %in% distributionList) & (distrib1.name %in% distributionList)
if( test == FALSE ){ print("Erreur de saisie dans le nom d'une des composantes")}
# SPEC. COMPOSANTE 1
if(length(distrib1.parameter) == 1){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter)
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter)
}
if(length(distrib1.parameter) == 2){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter[1], distrib1.parameter[2])
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter[1], distrib1.parameter[2])
}
assign("rf1", rf1, envir = .GlobalEnv)
assign("df1", df1, envir = .GlobalEnv)
if(indice.pos == 1){
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,assign(distrib2.parameter$unknown.parameter,theta),distrib2.parameter$known.parameter)
}
else{
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,distrib2.parameter$known.parameter,assign(distrib2.parameter$unknown.parameter,theta))
}
# SEPC. COMPOSANTE 2
#rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,distrib2.parameter$known.parameter, assign(distrib2.parameter$unknown.parameter,theta))
#df2 = function(x,theta) get(paste0("d", distrib2.name))(x, assign(unknown.parameter,theta),known.parameter)
assign("rf2", rf2, envir = .GlobalEnv)
# assign("df2", df2, envir = .GlobalEnv)
# curve(df1(x), main = paste0("d",distrib1.name," de paramètre ",distrib1.parameter))
}
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = list(known.parameter=1,unknown.parameter = "min"), indice.pos = 1)
rf2(10,0.5)
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = list(known.parameter=1,unknown.parameter = "max"), indice.pos = 2)
rf2(10,1)
rf2(10,1)
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = list(known.parameter=0,unknown.parameter = "max"), indice.pos = 2)
rf2(10,1)
spec = function(distrib1.name, distrib2.name, distrib1.parameter, distrib2.parameter, indice.pos){
distributionList = c("exp", "norm", "lnorm", "weibull","unif")
test = (distrib1.name %in% distributionList) & (distrib1.name %in% distributionList)
if( test == FALSE ){ print("Erreur de saisie dans le nom d'une des composantes")}
# SPEC. COMPOSANTE 1
if(length(distrib1.parameter) == 1){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter)
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter)
}
if(length(distrib1.parameter) == 2){
rf1 = function(n) get(paste0("r", distrib1.name))(n, distrib1.parameter[1], distrib1.parameter[2])
df1 = function(x) get(paste0("d", distrib1.name))(x, distrib1.parameter[1], distrib1.parameter[2])
}
assign("rf1", rf1, envir = .GlobalEnv)
assign("df1", df1, envir = .GlobalEnv)
# SEPC. COMPOSANTE 2
if(indice.pos == 1){
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n, assign(distrib2.parameter$unknown.parameter,theta),distrib2.parameter$known.parameter)
df2 = function(x,theta) get(paste0("d", distrib2.name))(x, assign(distrib2.parameter$unknown.parameter,theta),distrib2.parameter$known.parameter)
}
else{
rf2 = function(n,theta) get(paste0("r", distrib2.name))(n,distrib2.parameter$known.parameter,assign(distrib2.parameter$unknown.parameter,theta))
df2 = function(x,theta) get(paste0("d", distrib2.name))(x,distrib2.parameter$known.parameter,assign(distrib2.parameter$unknown.parameter,theta))
}
assign("rf2", rf2, envir = .GlobalEnv)
assign("df2", df2, envir = .GlobalEnv)
rmix = function(x,pi,theta) (1-pi)*df1(x) + pi*df2(x,theta)
assign("rmix", rmix, envir = .GlobalEnv)
# curve(df1(x), main = paste0("d",distrib1.name," de paramètre ",distrib1.parameter))
}
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = c(0,"max"),indice.pos = 2)
stat.T = function(echantillon, eta){
n = length(echantillon)
n.moins = sum(echantillon < eta)
n.plus = n - n.moins
hatpi = (1+eta/(1-eta))*n.moins/n - eta/(1-eta)
denom.1 = n.moins/(eta/(1-eta) + hatpi)**2
denom.2 = n.plus/(1-hatpi)**2
an = n/(denom.1+denom.2)
t = sqrt(n/an)*hatpi
return(t)
}
t = function(echantillon) max(sapply(X = discrétisationTheta, FUN = stat.t, echantillon = echantillon))
algorithm.KLm = function(n,nexp){
matrice.dechantillonnage = matrix(data = rf1(n*nexp), byrow = TRUE, nrow = nexp)
vecteur.tk = apply(X = matrice.dechantillonnage, FUN = t, MARGIN = 1)
return(list("vecteur.tk" = vecteur.tk))
}
algorithm.KLm(10,10)
stat.t = function(echantillon, eta){
n = length(echantillon)
n.moins = sum(echantillon < eta)
n.plus = n - n.moins
hatpi = (1+eta/(1-eta))*n.moins/n - eta/(1-eta)
denom.1 = n.moins/(eta/(1-eta) + hatpi)**2
denom.2 = n.plus/(1-hatpi)**2
an = n/(denom.1+denom.2)
t = sqrt(n/an)*hatpi
return(t)
}
t = function(echantillon) max(sapply(X = discrétisationTheta, FUN = stat.t, echantillon = echantillon))
algorithm.KLm(10,10)
discretisationTheta = runif(100)
algorithm.KLm(10,10)
stat.t = function(echantillon, eta){
n = length(echantillon)
n.moins = sum(echantillon < eta)
n.plus = n - n.moins
hatpi = (1+eta/(1-eta))*n.moins/n - eta/(1-eta)
denom.1 = n.moins/(eta/(1-eta) + hatpi)**2
denom.2 = n.plus/(1-hatpi)**2
an = n/(denom.1+denom.2)
t = sqrt(n/an)*hatpi
return(t)
}
t = function(echantillon) max(sapply(X = discretisationTheta, FUN = stat.t, echantillon = echantillon))
algorithm.KLm = function(n,nexp){
matrice.dechantillonnage = matrix(data = rf1(n*nexp), byrow = TRUE, nrow = nexp)
vecteur.tk = apply(X = matrice.dechantillonnage, FUN = t, MARGIN = 1)
return(list("vecteur.tk" = vecteur.tk))
}
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = list(known.parameter=0,unknown.parameter = "max"), indice.pos = 2)
algorithm.KLm(10,10)
stat.t = function(echantillon, eta){
n = length(echantillon)
n.moins = sum(echantillon < eta)
n.plus = n - n.moins
hatpi = (1+eta/(1-eta))*n.moins/n - eta/(1-eta)
denom.1 = n.moins/(eta/(1-eta) + hatpi)**2
denom.2 = n.plus/(1-hatpi)**2
an = n/(denom.1+denom.2)
t = sqrt(n/an)*hatpi
return(t)
}
t = function(echantillon) max(sapply(X = discretisationTheta, FUN = stat.t, echantillon = echantillon))
algorithm.KLm = function(n,nexp){
matrice.dechantillonnage = matrix(data = rf1(n*nexp), byrow = TRUE, nrow = nexp)
print(matrice.dechantillonnage)
vecteur.tk = apply(X = matrice.dechantillonnage, FUN = t, MARGIN = 1)
return(list("vecteur.tk" = vecteur.tk))
}
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = list(known.parameter=0,unknown.parameter = "max"), indice.pos = 2)
algorithm.KLm = function(){
vecteur.tk = c()
for(k in c(1:nexp)){
tk = max(sapply(X = discretisationTheta,
FUN = stat.t,
echantillon = rmix(n)))
vecteur.tk = c(vecteur.tk,tk)
}
}
algorithm_1.KLm = function(){
vect.tk = c()
mat.T = c()
for(k in c(1:nexp)){
# Etape 1
X = rf1(n)
Tk = sapply(D.Theta_2, X = X, FUN = stat.T)#################################
# Etape 2
tk = max(Tk[3,])
vect.tk = c(vect.tk,tk)
# Matrice de covariance
SIG = c()
for(i in c(1:nb2)){
ligne = c()
for(j in c(1:nb2)){
if( j < i){
ligne = c(ligne,0)
}
else{
t1 = Dtilde.Theta_2[i]
t2 = Dtilde.Theta_2[j]
iter = rho(X,t1,t2) ##################################################
ligne = c(ligne,iter)
}
}
SIG = rbind(SIG,ligne)
}
temp.mat = t(SIG)
diag(temp.mat) = rep(0,nb2)
SIG = SIG + temp.mat
assign("matCov", SIG, envir = .GlobalEnv)
# Etape 3
ligne = c()
for(ktilde in c(1:n.tilde)){
# (a)
Y = mvrnorm(n = nb2, mu = rep(0,nb2), Sigma = SIG)
# (b)
tktilde = max(Y)
ligne = c(ligne,tktilde)
}
mat.T = rbind(mat.T,ligne)
# Etape 4
for(i in c(1:I)){
if(tk < ligne[as.integer(n.tilde*p[i])+1]){
r[i] = r[i]
}
else{
r[i] = r[i] + 1/nexp
}
}
}
assign("vect.tk", vect.tk, envir = .GlobalEnv)
assign("mat.T", mat.T, envir = .GlobalEnv)
return(c(vect.tk,mat.T,r))
}
discretisationTheta = runif(100)
algorithm.KLm(2,5)
algorithm.KLm(2,5)
algorithm.KLm = function(n,nexp){
matrice.dechantillonnage = matrix(data = rf1(n*nexp), byrow = TRUE, nrow = nexp)
print(matrice.dechantillonnage)
vecteur.tk = apply(X = matrice.dechantillonnage, FUN = t, MARGIN = 1)
return(list("vecteur.tk" = vecteur.tk))
}
algorithm.KLm(n = 2,nexp = 5)
matrice.dechantillonnage = matrix(data = rf1(n*nexp), byrow = TRUE, nrow = nexp)
n=10
nexp=3
matrice.dechantillonnage = matrix(data = rf1(n*nexp), byrow = TRUE, nrow = nexp)
t(matrice.dechantillonnage[1,])
matrice.dechantillonnage[1,]
sapply(X = discretisationTheta, FUN = stat.t, echantillon = matrice.dechantillonnage[1,])
library(pracma)
discretisationTheta = linspace(0,1,3)
sapply(X = discretisationTheta, FUN = stat.t, echantillon = matrice.dechantillonnage[1,])
max(sapply(X = discretisationTheta, FUN = stat.t, echantillon = matrice.dechantillonnage[1,])
)
stat.t = function(echantillon, eta){
n = length(echantillon)
n.moins = sum(echantillon < eta)
n.plus = n - n.moins
print(n.moins)
hatpi = (1+eta/(1-eta))*n.moins/n - eta/(1-eta)
print(hatpi)
denom.1 = n.moins/(eta/(1-eta) + hatpi)**2
denom.2 = n.plus/(1-hatpi)**2
an = n/(denom.1+denom.2)
print(an)
t = sqrt(n/an)*hatpi
return(t)
}
max(sapply(X = discretisationTheta, FUN = stat.t, echantillon = matrice.dechantillonnage[1,]))
stat.t = function(echantillon, eta){
n = length(echantillon)
n.moins = sum(echantillon < eta)
n.plus = n - n.moins
print("n.moins")
print(n.moins)
hatpi = (1+eta/(1-eta))*n.moins/n - eta/(1-eta)
print("hatpi")
print(hatpi)
denom.1 = n.moins/(eta/(1-eta) + hatpi)**2
denom.2 = n.plus/(1-hatpi)**2
an = n/(denom.1+denom.2)
print("an")
print(an)
t = sqrt(n/an)*hatpi
return(t)
}
discretisationTheta
max(sapply(X = discretisationTheta, FUN = stat.t, echantillon = matrice.dechantillonnage[1,]))
discretisationTheta = linspace(0.1,0.9,3)
max(sapply(X = discretisationTheta, FUN = stat.t, echantillon = matrice.dechantillonnage[1,]))
algorithm.KLm(n,nexp)
stat.t = function(echantillon, eta){
n = length(echantillon)
n.moins = sum(echantillon < eta)
n.plus = n - n.moins
# print("n.moins")
# print(n.moins)
hatpi = (1+eta/(1-eta))*n.moins/n - eta/(1-eta)
# print("hatpi")
# print(hatpi)
denom.1 = n.moins/(eta/(1-eta) + hatpi)**2
denom.2 = n.plus/(1-hatpi)**2
an = n/(denom.1+denom.2)
# print("an")
# print(an)
t = sqrt(n/an)*hatpi
return(t)
}
t = function(echantillon) max(sapply(X = discretisationTheta, FUN = stat.t, echantillon = echantillon))
algorithm.KLm = function(n,nexp){
matrice.dechantillonnage = matrix(data = rf1(n*nexp), byrow = TRUE, nrow = nexp)
print(matrice.dechantillonnage)
vecteur.tk = apply(X = matrice.dechantillonnage, FUN = t, MARGIN = 1)
return(list("vecteur.tk" = vecteur.tk))
}
spec(distrib1.name = "unif", distrib2.name = "unif", distrib1.parameter = c(0,1), distrib2.parameter = list(known.parameter=0,unknown.parameter = "max"), indice.pos = 2)
discretisationTheta = linspace(0.1,0.9,10)
algorithm.KLm(n = 10,nexp = 3)
sapply(X = discretisationTheta, FUN = stat.t, echantillon = matrice.dechantillonnage[1,])
typeof(sapply(X = discretisationTheta, FUN = stat.t, echantillon = matrice.dechantillonnage[1,]))
class(sapply(X = discretisationTheta, FUN = stat.t, echantillon = matrice.dechantillonnage[1,]))
t = function(echantillon){
l = sapply(X = discretisationTheta, FUN = stat.t, echantillon = echantillon)
l = l[!is.na(l)]
return(max(l))
}
algorithm.KLm(n = 10,nexp = 3)
algorithm.KLm(10,7)
algorithm.KLm = function(n,nexp){
matrice.dechantillonnage = matrix(data = rf1(n*nexp), byrow = TRUE, nrow = nexp)
vecteur.tk = apply(X = matrice.dechantillonnage, FUN = t, MARGIN = 1)
return(list("vecteur.tk" = vecteur.tk))
}
algorithm.KLm(10,7)
hist(algorithm.KLm(1e3,1e4))
hist(algorithm.KLm(1e3,1e4)$vecteur.tk)
hist(algorithm.KLm(1e3,1e4)$vecteur.tk,100)
hist(algorithm.KLm(1e3,1e4)$vecteur.tk,100,prob=T)
hist(algorithm.KLm(1e3,1e4)$vecteur.tk,50,prob=T)
