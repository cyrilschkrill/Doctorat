an.2 = 1/(1-eta.2)**2
}
else{
denom.1 = n.moins/(eta.2/(1-eta.2) + hatpi.2)**2
denom.2 = n.plus/(1-hatpi.2)**2
an.2 = n/(denom.1 + denom.2)
}
return(bn/sqrt(an.1*an.2))
}
}
MATRICE.TKK.TILDE(matrice.dechantillonnage,discretisation.Theta_2.tilde)
n.tilde = 10
MATRICE.TKK.TILDE(matrice.dechantillonnage,discretisation.Theta_2.tilde)
library(MASS)
MATRICE.TKK.TILDE(matrice.dechantillonnage,discretisation.Theta_2.tilde)
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 6, n = 30, pi.star = 0.5, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(matrice.dechantillonnage,discretisation.Theta_2.tilde)
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 6, n = 30, pi.star = 0.5, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(n.tilde = 15, matrice.dechantillonnage,discretisation.Theta_2.tilde)
View(matrice.tkk_tilde)
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 1e2, n = 30, pi.star = 0.5, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(n.tilde = 15, matrice.dechantillonnage,discretisation.Theta_2.tilde)
qqplot(vecteur.t,matrice.tkk_tilde[1,])
dim(matrice.tkk_tilde)
qqplot(vecteur.t,matrice.tkk_tilde[,1])
abline(1,0)
abline(0,1)
qqplot(vecteur.t,matrice.tkk_tilde[,1])
qqplot(vecteur.t,matrice.tkk_tilde[,2])
qqplot(vecteur.t,matrice.tkk_tilde[,3])
qqplot(vecteur.t,matrice.tkk_tilde[,4])
source("~/Desktop/rejet2.R")
VECTEUR_REJET = function(vecteurTk, matriceTkk.tilde,p){
I = length(p)
nb.rejet = rep(0,I)
for(i in c(1:I)){
for(k in c(1:nexp)){
tk.tilde_ord = matriceTkk.tilde[k,][order(matriceTkk.tilde[k,])]
nb.rejet[i] = nb.rejet[i] + 1*(vecteurTk[k] > tk.tilde_ord[k,as.integer(n.tilde*p[i])+1] | vecteurTk[k] == tk.tilde_ord[k,as.integer(n.tilde*p[i])+1])
}
}
return(nb.rejet/nexp)
}
VECTEUR_REJET(vecteurTk, matriceTkk.tilde,p=c(0.05,0.10,0.20,0.30))
VECTEUR_REJET = function(vecteurTk, matriceTkk.tilde,p){
I = length(p)
nb.rejet = rep(0,I)
nexp = length(vecteurTk)
for(i in c(1:I)){
for(k in c(1:nexp)){
tk.tilde_ord = matriceTkk.tilde[k,][order(matriceTkk.tilde[k,])]
nb.rejet[i] = nb.rejet[i] + 1*(vecteurTk[k] > tk.tilde_ord[k,as.integer(n.tilde*p[i])+1] | vecteurTk[k] == tk.tilde_ord[k,as.integer(n.tilde*p[i])+1])
}
}
return(nb.rejet/nexp)
}
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 1e2, n = 30, pi.star = 0.5, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(n.tilde = 15, matrice.dechantillonnage,discretisation.Theta_2.tilde)
source(file = 'rejet2.R')
VECTEUR_REJET(vecteurTk, matriceTkk.tilde,p=c(0.05,0.10,0.20,0.30))
VECTEUR_REJET(vecteur.t, matrice.tkk_tilde,p=c(0.05,0.10,0.20,0.30))
source(file = 'rejet2.R')
VECTEUR_REJET(vecteur.t, matrice.tkk_tilde,p=c(0.05,0.10,0.20,0.30))
dim(matrice.tkk_tilde)
ncol(matrice.tkk_tilde)
length(vecteur.r)
length(vecteur.t)
VECTEUR_REJET(vecteur.t, matrice.tkk_tilde,p=1-c(0.05,0.10,0.20,0.30))
1-c(0.05,0.10,0.20,0.30)
k=1
ordered.tkk_tilde = matrice.tkk_tilde[k,][order(matrice.tkk_tilde[k,])]
ordered.tkk_tilde
VECTEUR_REJET = function(vecteur.t, matrice.tkk_tilde,p){
I = length(p)
nb.rejet = rep(0,I)
n.tilde = ncol(matrice.tkk_tilde)
nexp = length(vecteur.t)
for(i in c(1:I)){
for(k in c(1:nexp)){
ordered.tkk_tilde = matrice.tkk_tilde[k,][order(matrice.tkk_tilde[k,])]
nb.rejet[i] = nb.rejet[i] + 1*(vecteur.t[k] > tk.tilde_ord[k,as.integer(n.tilde*p[i])+1] | vecteur.t[k] == tk.tilde_ord[k,as.integer(n.tilde*p[i])+1])
}
}
return(nb.rejet/nexp)
}
VECTEUR_REJET(vecteur.t, matrice.tkk_tilde,p=1-c(0.05,0.10,0.20,0.30))
nb.rejet[i] = nb.rejet[i] + 1*(vecteur.t[k] > ordered.tkk_tilde[k,as.integer(n.tilde*p[i])+1] | vecteur.t[k] == ordered.tkk_tilde[k,as.integer(n.tilde*p[i])+1])
VECTEUR_REJET = function(vecteur.t, matrice.tkk_tilde,p){
I = length(p)
nb.rejet = rep(0,I)
n.tilde = ncol(matrice.tkk_tilde)
nexp = length(vecteur.t)
for(i in c(1:I)){
for(k in c(1:nexp)){
ordered.tkk_tilde = matrice.tkk_tilde[k,][order(matrice.tkk_tilde[k,])]
nb.rejet[i] = nb.rejet[i] + 1*(vecteur.t[k] > ordered.tkk_tilde[k,as.integer(n.tilde*p[i])+1] | vecteur.t[k] == ordered.tkk_tilde[k,as.integer(n.tilde*p[i])+1])
}
}
return(nb.rejet/nexp)
}
VECTEUR_REJET(vecteur.t, matrice.tkk_tilde,p=1-c(0.05,0.10,0.20,0.30))
VECTEUR_REJET = function(vecteur.t, matrice.tkk_tilde,p){
q=1-p
I = length(p)
nb.rejet = rep(0,I)
n.tilde = ncol(matrice.tkk_tilde)
nexp = length(vecteur.t)
for(i in c(1:I)){
for(k in c(1:nexp)){
ordered.tkk_tilde = matrice.tkk_tilde[k,][order(matrice.tkk_tilde[k,])]
nb.rejet[i] = nb.rejet[i] + 1*(vecteur.t[k] > ordered.tkk_tilde[k,as.integer(n.tilde*q[i])+1] | vecteur.t[k] == ordered.tkk_tilde[k,as.integer(n.tilde*q[i])+1])
}
}
return(nb.rejet/nexp)
}
VECTEUR_REJET(vecteur.t, matrice.tkk_tilde,p=c(0.05,0.10,0.20,0.30))
VECTEUR_REJET = function(vecteur.t, matrice.tkk_tilde,p){
q=1-p
I = length(p)
nb.rejet = rep(0,I)
n.tilde = ncol(matrice.tkk_tilde)
nexp = length(vecteur.t)
for(i in c(1:I)){
print(i)
for(k in c(1:nexp)){
print(k)
ordered.tkk_tilde = matrice.tkk_tilde[k,][order(matrice.tkk_tilde[k,])]
print(as.integer(n.tilde*q[i])+1)
nb.rejet[i] = nb.rejet[i] + 1*(vecteur.t[k] > ordered.tkk_tilde[k,as.integer(n.tilde*q[i])+1] | vecteur.t[k] == ordered.tkk_tilde[k,as.integer(n.tilde*q[i])+1])
}
}
return(nb.rejet/nexp)
}
VECTEUR_REJET(vecteur.t, matrice.tkk_tilde,p=c(0.05,0.10,0.20,0.30))
matrice.tkk_tilde[1,][order(matrice.ttk_tilde[1,])]
matrice.tkk_tilde[1,][order(matrice.tkk_tilde[1,])]
length(matrice.tkk_tilde[1,][order(matrice.tkk_tilde[1,])])
VECTEUR_REJET = function(vecteur.t, matrice.tkk_tilde,p){
q=1-p
I = length(p)
nb.rejet = rep(0,I)
n.tilde = ncol(matrice.tkk_tilde)
nexp = length(vecteur.t)
for(i in c(1:I)){
print(i)
for(k in c(1:nexp)){
print(k)
ordered.tkk_tilde = matrice.tkk_tilde[k,][order(matrice.tkk_tilde[k,])]
print(as.integer(n.tilde*q[i])+1)
nb.rejet[i] = nb.rejet[i] + 1*(vecteur.t[k] > ordered.tkk_tilde[as.integer(n.tilde*q[i])+1] | vecteur.t[k] == ordered.tkk_tilde[as.integer(n.tilde*q[i])+1])
}
}
return(nb.rejet/nexp)
}
VECTEUR_REJET(vecteur.t, matrice.tkk_tilde,p=c(0.05,0.10,0.20,0.30))
matrice.statistique
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 1e2, n = 30, pi.star = 0, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(n.tilde = 15, matrice.dechantillonnage,discretisation.Theta_2.tilde)
source(file = 'rejet2.R')
VECTEUR_REJET(vecteur.t, matrice.tkk_tilde,p=c(0.05,0.10,0.20,0.30))
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 1e2, n = 1e3, pi.star = 0, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(n.tilde = 1e2, matrice.dechantillonnage,discretisation.Theta_2.tilde)
compteur = 1
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 1e2, n = 1e3, pi.star = 0, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(n.tilde = 1e2, matrice.dechantillonnage,discretisation.Theta_2.tilde)
assign("compteur",1,envir = .GlobalEnv)
# Melange Uniforme && KLm: Fonctions #
specificationDuMelange = function(nomDistribution.1,
nomDistribution.2,
parametrage.1,
nombreParametres.distribution_2 = 1,
positionParam.2_inconnu = 1,
valeurParam.2_connue = NaN){
distributionList = c("exp", "norm", "lnorm", "weibull","unif")
test = (nomDistribution.1 %in% distributionList) & (nomDistribution.1 %in% distributionList)
if( test == FALSE ){ print("Erreur de saisie dans le nom d'une des composantes")}
# PREMIERE COMPOSANTE #
if(length(parametrage.1) == 1){
rf1 = function(n) get(paste0("r", nomDistribution.1))(n, parametrage.1)
df1 = function(x) get(paste0("d", nomDistribution.1))(x, parametrage.1)
}
if(length(parametrage.1) == 2){
rf1 = function(n) get(paste0("r", nomDistribution.1))(n, parametrage.1[1], parametrage.1[2])
df1 = function(x) get(paste0("d", nomDistribution.1))(x, parametrage.1[1], parametrage.1[2])
}
assign("rf1", rf1, envir = .GlobalEnv)
assign("df1", df1, envir = .GlobalEnv)
# DEUXIEME COMPOSANTE #
if(nombreParametres.distribution_2 == 1){
rf2 = function(n,eta) get(paste0("r", nomDistribution.2))(n, eta)
df2 = function(x,eta) get(paste0("d", nomDistribution.2))(x, eta)
}
else{ # nombreParametres.distribution_2 == 2
if(nombreParametres.distribution_2 != 2) return("Erreur: Le nombre de paramètres de la composante ne peut que prendre les valeurs 1 ou 2.")
if(positionParam.2_inconnu == 1){
rf2 = function(n,eta) get(paste0("r", nomDistribution.2))(n, eta, valeurParam.2_connue)
df2 = function(x,eta) get(paste0("d", nomDistribution.2))(x, eta, valeurParam.2_connue)
}
else{ # positionParam.2_inconnu == 2
if(positionParam.2_inconnu != 2) return("Erreur: La position du paramètre inconnu de la seconde composante.")
rf2 = function(n,eta) get(paste0("r", nomDistribution.2))(n, valeurParam.2_connue, eta)
df2 = function(x,eta) get(paste0("d", nomDistribution.2))(x, valeurParam.2_connue, eta)
}
}
assign("rf2", rf2, envir = .GlobalEnv)
assign("df2", df2, envir = .GlobalEnv)
# FONCTIONS DU MELANGE #
rmix = function(n,pi,eta){
output = sample(x = c(0,1), size = n, replace = TRUE, prob = c(1-pi,pi))
nb1 = sum(output)
output[output == 1] = rf2(nb1,eta)
output[output == 0] = rf1(n-nb1)
return(output)
}
dmix = function(x,pi,eta) (1-pi)*df1(x) + pi*df2(x,eta)
assign("rmix", rmix, envir = .GlobalEnv)
assign("dmix", dmix, envir = .GlobalEnv)
}
MATRICE_ECHANTILLONNAGE = function(nexp, n, pi.star, eta.star){
if(!exists("rmix")) "La spécification du mélange n'a pas opérée."
matrice.dechantillonnage = matrix(data = rmix(n = n*nexp, pi = pi.star, eta = eta.star), nrow = nexp, byrow = TRUE)
assign("matrice.dechantillonnage", matrice.dechantillonnage, envir = .GlobalEnv)
# return(matrice.dechantillonnage)
}
CALCUL_STATISTIQUE = function(echantillon, eta){
n = length(echantillon)
n.moins = sum(echantillon < eta)
hatpi = (1+eta/(1-eta))*n.moins/n - eta/(1-eta)
n.plus = n - n.moins
if(n.plus == 0 | n.moins == 0){
an = 1/(1-eta)**2
}
else{
denom.1 = n.moins/(eta/(1-eta) + hatpi)**2
denom.2 = n.plus/(1-hatpi)**2
an = n/(denom.1 + denom.2)
}
s = sqrt(n/an)*hatpi
#  return(data.frame(hatpi,an,s))
return(c(hatpi,an,s))
}
MATRICE_STATISTIQUE = function(matrice.dechantillonnage, eta){
matrice.statistique = t(apply(X = matrice.dechantillonnage, eta = eta, FUN = CALCUL_STATISTIQUE, MARGIN = 1))
matrice.statistique = data.frame(matrice.statistique)
names(matrice.statistique) = c("hatpi","an","s")
assign("matrice.statistique", matrice.statistique, envir = .GlobalEnv)
#return(matrice.statistique)
}
VECTEUR_T = function(matrice.dechantillonnage, discretisation.Theta_2){
vecteur.s = sapply(X = discretisation.Theta_2, FUN = (function(eta) MATRICE_STATISTIQUE(matrice.dechantillonnage, eta)$s) )
assign("vecteur.s", vecteur.s, envir = .GlobalEnv)
vecteur.t = apply(X = vecteur.s, FUN = max, MARGIN = 1)
assign("vecteur.t", vecteur.t, envir = .GlobalEnv)
}
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 1e2, n = 1e3, pi.star = 0, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(n.tilde = 1e2, matrice.dechantillonnage,discretisation.Theta_2.tilde)
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
assign("compteur",1,envir = .GlobalEnv)
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 1e2, n = 1e3, pi.star = 0, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(n.tilde = 1e2, matrice.dechantillonnage,discretisation.Theta_2.tilde)
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
assign("compteur",1,envir = .GlobalEnv)
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 1e2, n = 1e3, pi.star = 0, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
assign("compteur",1,envir = .GlobalEnv)
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 1e2, n = 1e3, pi.star = 0, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(n.tilde = 1e2, matrice.dechantillonnage,discretisation.Theta_2.tilde)
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
assign("compteur",1,envir = .GlobalEnv)
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 10, n = 1e3, pi.star = 0, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(n.tilde = 1e2, matrice.dechantillonnage,discretisation.Theta_2.tilde)
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
assign("compteur",1,envir = .GlobalEnv)
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 10, n = 1e3, pi.star = 0, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(n.tilde = 1e2, matrice.dechantillonnage,discretisation.Theta_2.tilde)
setwd(dir = '/Users/cyril/cthommeret-phd/simulations/melangeUnif/KLm/v2')
rm(list = ls())
source('Fonctions.R')
assign("compteur",1,envir = .GlobalEnv)
specificationDuMelange(nomDistribution.1 = "unif", nomDistribution.2 = "unif", parametrage.1 = c(0,1), nombreParametres.distribution_2 = 2, positionParam.2_inconnu = 2, valeurParam.2_connue = 0)
x = rmix(1e3,pi = 0.5, eta = 0.33)
hist(x,breaks = 100)
# CALCUL_STATISTIQUE(x, eta = 0.3)
MATRICE_ECHANTILLONNAGE(nexp = 10, n = 1e3, pi.star = 0, eta.star = 0.3)
MATRICE_STATISTIQUE(matrice.dechantillonnage, eta = 0.5)
hist(matrice.statistique$hatpi,breaks=5)
library(pracma)
discretisation.Theta_2 = linspace(0.001,0.9,50)
discretisation.Theta_2.tilde = discretisation.Theta_2
VECTEUR_T(matrice.dechantillonnage,discretisation.Theta_2)
hist(vecteur.t,breaks=100,prob=TRUE)
# OK tout baigne !
source(file = 'ttilde.R')
library(MASS)
MATRICE.TKK.TILDE(n.tilde = 50, matrice.dechantillonnage,discretisation.Theta_2.tilde)
source(file = 'rejet2.R')
VECTEUR_REJET(vecteur.t, matrice.tkk_tilde,p=c(0.05,0.10,0.20,0.30))
